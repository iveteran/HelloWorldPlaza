gcc用法简介

gcc的工作流程
预编译(-E) -> 生成汇编代码(-S) -> 编译生成.o文件(-c) -> 链接生成可执行文件
例：
gcc -E hello.c > output.txt
gcc -S hello.c        生成hello.s
gcc -c hello.c        生成hello.o
gcc hello.c           生成a.out
gcc -o hello hello.c  生成hello


gcc的常用参数
gcc [-c|-S|-E] [-std=standard]
    [-g] [-pg] [-Olevel]
    [-Wwarn...] [-pedantic]
    [-Idir...] [-Ldir...]
    [-Dmacro[=defn]...] [-Umacro]
    [-foption...] [-mmachine-option...]
    [-o outfile] [@file] infile...


-c 只生成.o文件
-S 只生成.s文件
-E 只进行预编译
-std=standard 采用哪个c/c++标准
-g 生成调试符号(gdb)
-pg 生成供gprof使用的性能监视代码
-O 优化级别: -O0(defaut,不优化), -O1, -O2, -O3
-Wwarn... 告警设置: -Wall开启所有的告警, -Wextra -Wall加上扩展的, -Werror把告警当成错误处理
-Idir 添加头文件目录
-Ldir 添加库文件目录
-lxxx 添加链接库libxxx.a
-Dmacro[=defn] 添回宏定义
-Umacro 删除宏定义
-o outfile 输出的可执行文件名

例：
gcc -g -pg -Wall -DLINUX -DENABLE_DEBUG -DDEBUG_LEVEL=3 -o hello hello.c -I../include -I/opt/myinclude -L../lib -L/opt/mylib -lmath -lmylibxxx


用gcc生成依赖文件
gcc -MM hello.c > hello.d
cat hello.d
hello.o: hello.c hello.h public.h