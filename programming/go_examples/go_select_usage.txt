Go 知识点（09）— for select 作用于 channel
Refer: https://blog.csdn.net/wohu1104/article/details/115497151

在使用select语句的时候，我们首先需要注意下面几个事情：
1) 有默认分支，那么无论涉及通道操作的表达式是否有阻塞，select 语句都不会被阻塞。如果那几个表达式都阻塞了，或者说都没有满足求值的条件，那么默认分支就会被选中并执行。
2) 没有加入默认分支，那么一旦所有的 case 表达式都没有满足求值条件，那么 select 语句就会被阻塞。直到至少有一个 case 表达式满足条件为止。
3) 我们需要通过接收表达式的第二个结果值来判断通道是否已经关闭。一旦发现某个通道关闭了，我们就应该及时地屏蔽掉对应的分支或者采取其他措施。这对于程序逻辑和程序性能都是有好处的。
4) select 语句只能对其中的每一个 case 表达式各求值一次。如果我们想连续或定时地操作其中的通道的话，就往往需要通过在 for 语句中嵌入 select 语句的方式实现。
     但这时要注意，简单地在 select语句的分支中使用 break 语句，只能结束当前的 select 语句的执行，而并不会对外层的 for语句产生作用。这种错误的用法可能会让这个for语句无休止地运行下去。

例子:
go_select_ex01.go
go_select_ex02.go
go_select_ex03.go

由以上示例我们可以得出以下结论：
1) select 语句中如果任意某个 case 的通道有值可读时，它就会被执行，其他 case 会被忽略；
2) 如果没有 default 语句，select 将有可能阻塞，直到某个 case 分之有值可以运行，所以 select 里最好有一个 default ，否则将有一直阻塞的风险；
如果 select 语句发现同时有多个候选分支满足选择条件，那么它就会用一种伪随机的算法在这些分支中选择一个并执行。
仅当 select 语句中的所有 case 表达式都被求值完毕后，它才会开始选择候选分支。这时候，它只会挑选满足选择条件的候选分支执行。如果所有的候选分支都不满足选择条件，那么默认分支就会被执行。如果这时没有默认分支，那么 select 语句就会立即进入阻塞状态，直到至少有一个候选分支满足选择条件为止。一旦有一个候选分支满足选择条件，select 语句就会被唤醒，这个候选分支就会被执行。

--------------------------------------

Golang | 深入理解Select
Refer: https://juejin.cn/post/7098008563649511432

select 主要用于监听多个channel是否可以收发消息，select会尝试执行case语句。
当任何一个case满足条件则会执行，若没有可执行的case，就会执行default分支。
如果default也不满足，程序会跳出select语句块.

在准备阶段，有三种情况时，编译器会优化:
1. 没有case和default情况下，直接调用gopark()使当前协程永远阻塞 。
2. 如果只有一个case，那么select会被优化成一个if语句.
3. 只有一个case和default.
 1) 如果这个case是发送操作，会直接调用channel.chansend()进行一次非阻塞的发送
 2) 如果是接收操作，会直接调用chan.chanrecv()进行一次非阻塞的接收操作

阻塞main协程:
使用 select{}可以将main协程阻塞住，但需要注意，被select{}阻塞的主协程，需要有活跃或者休眠(time.Sleep)的协程与之相关联，否则将发生panic.

超时限制:
我们可以通过监听一个 退出通道 来做到超时控制。
退出通道可以用time.After() 也可以用context.Done()，或者是一个程序级别的closeChannel
例子:
go_select_ex05.go
