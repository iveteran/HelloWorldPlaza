Bind command in Linux with Examples
Last Updated : 18 Apr, 2019
Refer: https://www.geeksforgeeks.org/bind-command-in-linux-with-examples/

bind command is Bash shell builtin command. It is used to set Readline key bindings and variables. The keybindings are the keyboard actions that are bound to a function. So it can be used to change how the bash will react to keys or combinations of keys, being pressed on the keyboard.

Syntax:
bind [-lpsvPSVX] [-m keymap] [-q name] [-f filename] [-u name] [-r keyseq]
     [-x keyseq:shell-command] [keyseq:readline-function or readline-command]

Options:
    -m keymap: It uses KEYMAP as the key mapping scheme for the duration of the current command sequence. Acceptable keymap names are as follows : emacs, emacs-standard, emacs-meta, emacs-ctlx, vi, vi-move, vi-command, and vi-insert.
    -l: It list names of functions.
    -P: It list function names and bindings.
    -p: It list functions and bindings in a form that can be reused as input.
    -S: It list key sequences that invoke macros and their values.
    -s: It list key sequences that invoke macros and their values in a form that can be reused as input.
    -V: It list variable names and values.
    -v: It list variable names and values in a form that canbe reused as input.
    -q function-name: It query about which keys invoke the named function.
    -u function-name: It unbind all keys which are bound to the named function.
    -r keyseq: It remove the binding for KEYSEQ.
    -f filename: It read key bindings from FILENAME.
    -x keyseq:shell-command: It cause SHELL-COMMAND to be executed when KEYSEQ is entered.
    -XIt lists key sequences bound with -x and associated commands in a form that can be reused as input.


How bind represents keys:
\C- 	Represents holding down Ctrl, and pressing the keys which follow the dash.
\e 	The Escape key. This is used for other bindings, such as the Meta key. For example, Alt is a meta key on many keyboards.

Examples:
Refer: https://www.computerhope.com/unix/bash/bind.htm

bind "\C-k":kill-line   # Bind Ctrl+K to the kill-line function
bind "\C-y":yank        # Bind Ctrl+Y to the yank function
bind -q yank            # Query what key combination is bound to yank function 
bind -r "\C-y"          # Remove all bindings for the key sequence \C-y
bind '"\e[18~":"Hi!"'   # Bind a macro to F7 (keycode \e [ 1 8 ~) with the text Hi!
bind -x '"\eOS":"fortune | cowsay"'     # Bind F4 to run the command fortune | cowsay.
