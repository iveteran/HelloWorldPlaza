String Operations in Bash
Ref: [https://linuxhandbook.com/bash-strings/]

1. Get string length in Bash:
1) method 1
echo ${#my_string}
eg:
$ my_string="hello world"
$ echo "${#my_string}"
11

2) method 2
$ my_string="hello world"
$ expr length "$my_string"
$ expr length "hello world"
11

2. Concatenating two strings
$ str1="hand"
$ str2="book"
$ str3=$str1$str2
$ echo $str3
handbook

3. Finding substrings
$ str="Bash is Cool"
$ word="Cool"
$ expr index "$str" "$word"
9

4. Extracting substrings
$ foss="Fedora is a free operating system"
$ echo ${foss:0:6}
Fedora

5. Replacing substrings
$ foss="Fedora is a free operating system"
$ echo ${foss/Fedora/Ubuntu}
Ubuntu is a free operating system
$ echo ${foss/free/popular}
Fedora is a popular operating system

6. Deleting substrings
$ fact="Sun is a big star"
$ echo ${fact/big}
Sun is a star
$cell="112-358-1321"
echo ${cell/-}
112358-1321
echo ${cell//-}
1123581321

7. Converting upper and lower-case letters in string
$ legend="john nash"
$ actor="JULIA ROBERTS"
$ echo ${legend^^}
JOHN NASH
$ echo ${actor,,}
julia roberts
$ echo ${legend^}
John nash
$ echo ${actor,}
jULIA ROBERTS
$ echo ${legend^^[jn]}
JohN Nash


------------------------------------
Bash 中常见的字符串操作
Ref: [https://www.cnblogs.com/sparkdev/p/10006970.html]

1. 匹配字符串开头的子串长度
expr match "$string" '$substring'
$substring 是一个正则表达式。

MyString=abcABC123ABCabc
echo $(expr match "$MyString" 'abc[A-Z]*.2')   # 结果为 8

2. 提取子串
${string:position}
在 $string 中从位置 $position 处开始提取子串。
如果 $string 是 "*" 或者 "@"，那么将会提取从位置 $position 开始的位置参数。
${string:position:length}
在 $string 中从位置 $position 开始提取 $length 长度的子串。

'''
MyString=abcABC123ABCabc
echo ${MyString:3}       # ABC123ABCabc，注意：此时索引是从 0 开始的。
echo ${MyString:1:5}     # bcABC

echo ${*:2} # 打印出第 2 个和后边所有的位置参数。
echo ${@:2} # 同上。
echo ${*:2:3} # 从第 2 个开始, 连续打印 3 个位置参数。
'''

expr match "$string" '\($substring\)'
从 $string 的开始位置提取 $substring，$substring 是正则表达式。

MyString=abcABC123ABCabc
echo $(expr match "$MyString" '\(.[b-c]*[A-Z]..[0-9]\)') # abcABC1

3. 删除子串
${string#substring}
从 $string 的开头位置截掉最短匹配的 $substring。
${string##substring}
从 $string 的开头位置截掉最长匹配的 $substring。
'''
MyString=abcABC123ABCabc
echo ${MyString#a*C} # 123ABCabc
# 截掉 'a' 到 'C' 之间最短的匹配字符串。

echo ${MyString##a*C} # abc
# 截掉 'a' 到 'C' 之间最长的匹配字符串。
'''

${string%substring}
从 $string 的结尾位置截掉最短匹配的 $substring。
${string%%substring}
从 $string 的结尾位置截掉最长匹配的 $substring。
'''
MyString=abcABC123ABCabc
echo ${MyString%b*c} # abcABC123ABCa
# 从 $MyString 的结尾位置截掉 'b' 到 'c' 之间最短的匹配。

echo ${MyString%%b*c} # a
# 从 $MyString 的结尾位置截掉 'b' 到 'c' 之间最长的匹配。
当你需要构造文件名的时候，这个操作就显得特别有用。
'''

------------------------------------
字符串操作
Ref: [https://wangdoc.com/bash/string.html]

Bash 提供字符串搜索和替换的多种方法。

（1）字符串头部的模式匹配。

以下两种语法可以检查字符串开头，是否匹配给定的模式。如果匹配成功，就删除匹配的部分，返回剩下的部分。原始变量不会发生变化。

# 如果 pattern 匹配变量 variable 的开头，
# 删除最短匹配（非贪婪匹配）的部分，返回剩余部分
${variable#pattern}

# 如果 pattern 匹配变量 variable 的开头，
# 删除最长匹配（贪婪匹配）的部分，返回剩余部分
${variable##pattern}
上面两种语法会删除变量字符串开头的匹配部分（将其替换为空），返回剩下的部分。区别是一个是最短匹配（又称非贪婪匹配），另一个是最长匹配（又称贪婪匹配）。

匹配模式pattern可以使用*、?、[]等通配符。

$ myPath=/home/cam/book/long.file.name

$ echo ${myPath#/*/}
cam/book/long.file.name

$ echo ${myPath##/*/}
long.file.name
上面例子中，匹配的模式是/*/，其中*可以匹配任意数量的字符，所以最短匹配是/home/，最长匹配是/home/cam/book/。

下面写法可以删除文件路径的目录部分，只留下文件名。

$ path=/home/cam/book/long.file.name

$ echo ${path##*/}
long.file.name
上面例子中，模式*/匹配目录部分，所以只返回文件名。

下面再看一个例子。

$ phone="555-456-1414"
$ echo ${phone#*-}
456-1414
$ echo ${phone##*-}
1414
如果匹配不成功，则返回原始字符串。

$ phone="555-456-1414"
$ echo ${phone#444}
555-456-1414
上面例子中，原始字符串里面无法匹配模式444，所以原样返回。

如果要将头部匹配的部分，替换成其他内容，采用下面的写法。

# 模式必须出现在字符串的开头
${variable/#pattern/string}

# 示例
$ foo=JPG.JPG
$ echo ${foo/#JPG/jpg}
jpg.JPG
上面例子中，被替换的JPG必须出现在字符串头部，所以返回jpg.JPG。

（2）字符串尾部的模式匹配。

以下两种语法可以检查字符串结尾，是否匹配给定的模式。如果匹配成功，就删除匹配的部分，返回剩下的部分。原始变量不会发生变化。

# 如果 pattern 匹配变量 variable 的结尾，
# 删除最短匹配（非贪婪匹配）的部分，返回剩余部分
${variable%pattern}

# 如果 pattern 匹配变量 variable 的结尾，
# 删除最长匹配（贪婪匹配）的部分，返回剩余部分
${variable%%pattern}
上面两种语法会删除变量字符串结尾的匹配部分（将其替换为空），返回剩下的部分。区别是一个是最短匹配（又称非贪婪匹配），另一个是最长匹配（又称贪婪匹配）。

$ path=/home/cam/book/long.file.name

$ echo ${path%.*}
/home/cam/book/long.file

$ echo ${path%%.*}
/home/cam/book/long
上面例子中，匹配模式是.*，其中*可以匹配任意数量的字符，所以最短匹配是.name，最长匹配是.file.name。

下面写法可以删除路径的文件名部分，只留下目录部分。

$ path=/home/cam/book/long.file.name

$ echo ${path%/*}
/home/cam/book
上面例子中，模式/*匹配文件名部分，所以只返回目录部分。

下面的写法可以替换文件的后缀名。

$ file=foo.png
$ echo ${file%.png}.jpg
foo.jpg
上面的例子将文件的后缀名，从.png改成了.jpg。

下面再看一个例子。

$ phone="555-456-1414"
$ echo ${phone%-*}
555-456
$ echo ${phone%%-*}
555
如果匹配不成功，则返回原始字符串。

如果要将尾部匹配的部分，替换成其他内容，采用下面的写法。

# 模式必须出现在字符串的结尾
${variable/%pattern/string}

# 示例
$ foo=JPG.JPG
$ echo ${foo/%JPG/jpg}
JPG.jpg
上面例子中，被替换的JPG必须出现在字符串尾部，所以返回JPG.jpg。

（3）任意位置的模式匹配。

以下两种语法可以检查字符串内部，是否匹配给定的模式。如果匹配成功，就删除匹配的部分，换成其他的字符串返回。原始变量不会发生变化。

# 如果 pattern 匹配变量 variable 的一部分，
# 最长匹配（贪婪匹配）的那部分被 string 替换，但仅替换第一个匹配
${variable/pattern/string}

# 如果 pattern 匹配变量 variable 的一部分，
# 最长匹配（贪婪匹配）的那部分被 string 替换，所有匹配都替换
${variable//pattern/string}
上面两种语法都是最长匹配（贪婪匹配）下的替换，区别是前一个语法仅仅替换第一个匹配，后一个语法替换所有匹配。

$ path=/home/cam/foo/foo.name

$ echo ${path/foo/bar}
/home/cam/bar/foo.name

$ echo ${path//foo/bar}
/home/cam/bar/bar.name
上面例子中，前一个命令只替换了第一个foo，后一个命令将两个foo都替换了。

下面的例子将分隔符从:换成换行符。

$ echo -e ${PATH//:/'\n'}
/usr/local/bin
/usr/bin
/bin
...
上面例子中，echo命令的-e参数，表示将替换后的字符串的\n字符，解释为换行符。

模式部分可以使用通配符。

$ phone="555-456-1414"
$ echo ${phone/5?4/-}
55-56-1414
上面的例子将5-4替换成-。

如果省略了string部分，那么就相当于匹配的部分替换成空字符串，即删除匹配的部分。

$ path=/home/cam/foo/foo.name

$ echo ${path/.*/}
/home/cam/foo/foo
上面例子中，第二个斜杠后面的string部分省略了，所以模式.*匹配的部分.name被删除后返回。

前面提到过，这个语法还有两种扩展形式。

# 模式必须出现在字符串的开头
${variable/#pattern/string}

# 模式必须出现在字符串的结尾
${variable/%pattern/string}
