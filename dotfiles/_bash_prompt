#
# Refer: https://bash-prompt-generator.org/
#        https://phoenixnap.com/kb/change-bash-prompt-linux
#        https://wiki.archlinux.org/title/Bash/Prompt_customization
#
# \u Username
# \h Short hostname
# \H The full hostname for the current machine
# \w The full path of the current working directory
# \W Basename of the current working directory (~ for home, the end of the current directory elsewhere)
# \s Shell name (bash or sh, depending on how the shell is called)
# \v Shell version
# \V Extra information about the BASH version
# \d Expands to the date in the format "Tue Jun 27"
# \D{fmt} Allows custom date formats—see man strftime for the available options
# \D{%c}  Gives the date and time in the current locale
# \t Time(24 hour)
# \T Time(12 hour)
# \@ Time(am/pm)
# \A Time(24 hour, without seconds)
# \n New line
# \r Carriage return
# \! History number
# \# Command number
# \j Job number
# \$ Promp sign
# $? Exit status
# \e Escape character
#
# Git Branch: \$(git branch --show-current 2>/dev/null)
# Right align: \$(printf '%*s' $COLUMNS) 
#
# \[..\] declares some non-printed characters
# \e[.. is an escape character. What follows is a special escape sequence to change the color (or other characteristic) in the terminal
# \e[0m at the end resets the colors to the terminal defaults
# 31m is red text (41m would be a red background)
# 36m is cyan text
# 1;43m declares a yellow background (1;33m would be yellow text)
#
# Here’s a breakdown of the commands:
# \e[ – Begin color changes
# \e[0m – Exit color-change mode
# 0;32m – Specify the color code
# [\u@\h \W]\$ – This is the code for your normal BASH prompt (username@hostname Workingdirectory $)
#
# The first number in the color code specifies the typeface:
# 0 – Normal
# 1 – Bold (bright)
# 2 – Dim
# 4 – Underlined
# 
# The second number indicates the color you want:
# 30 – Black
# 31 – Red
# 32 – Green
# 33 – Brown
# 34 – Blue
# 35 – Purple
# 36 – Cyan
# 37 – Light gray
#
# Black       0;30     Dark Gray     1;30
# Blue        0;34     Light Blue    1;34
# Green       0;32     Light Green   1;32
# Cyan        0;36     Light Cyan    1;36
# Red         0;31     Light Red     1;31
# Purple      0;35     Light Purple  1;35
# Brown       0;33     Yellow        1;33
# Light Gray  0;37     White         1;37
#
git_branch() {
  local branch=$(git branch --show-current 2>/dev/null)
  #branch=$(git symbolic-ref --short HEAD 2>/dev/null) # same as above
  if [ $branch ]
  then
    echo " ($branch)"
  fi
}
column_remain_spaces() {
  local taken_chars=$1
  printf "%*s" $((COLUMNS - taken_chars))
}
BEGIN_CHANGE="\["
END_CHANGE="\]"
BEGIN_COLOR="\e["
color_gray="1;30m"
color_purple="95m"
color_green="32m"
color_brown="33m"
color_reset="00m"
show_time() {
  #echo "\[\e[1;30m\]\t"
  echo "${BEGIN_CHANGE}${BEGIN_COLOR}${color_gray}${END_CHANGE}\t" # same as above
}
show_user_at_host() {
  #echo "\[\e[95m\]\u@\h"
  echo "${BEGIN_CHANGE}${BEGIN_COLOR}${color_purple}${END_CHANGE}\u@\h" # same as above
}
show_short_cwd() {
  #echo "\[\e[32m\]\W"
  echo "${BEGIN_CHANGE}${BEGIN_COLOR}${color_green}${END_CHANGE}\W" # same as above
}
show_git_branch() {
  #echo "\[\e[33m\]$(git_branch)"
  echo "${BEGIN_CHANGE}${BEGIN_COLOR}${color_brown}${END_CHANGE}\$(git_branch)" # same as above
}
end_color_change() {
  #echo "\[\e[00m\]"
  echo "${BEGIN_CHANGE}${BEGIN_COLOR}${color_reset}${END_CHANGE}" # same as above
}
#
#PS1="\u@\h \W [\$(git symbolic-ref --short HEAD 2>/dev/null)]\$ " # 显示原来的颜色
#PS1="\[\e[95m\]\u@\h \[\e[32m\]\W\[\e[33m\] (\$(git symbolic-ref --short HEAD 2>/dev/null))\[\e[0m\]\$ " # 加了颜色,但不在git的目录中会显示空括号
#PS1="[\[\e[95m\]\u@\h \[\e[32m\]\W\[\e[33m\]\$(git_branch)\[\e[0m\]]\$ "
#PS1="[\[\e[95m\]\u\[\e[1;30m\]@\[\e[95m\]\h \[\e[32m\]\W\[\e[33m\] \$(git_branch)\[\e[0m\]]\$ "
PS1="[$(show_time) $(show_user_at_host) $(show_short_cwd)$(show_git_branch)$(end_color_change)] \$ "
#
#PS1='\[[left$(column_remain_spaces 11)\]right]\n > '  # 11 means length of '[left' and 'right]'
#PS1="`printf -vch "%${COLUMNS}s" "${TEXT}"; printf "%s" "${ch// /-}"`$PS1"
